// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	multipart "mime/multipart"
	reflect "reflect"
	time "time"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
	models "github.com/mikheev-alexandr/pet-project/backend/internal/models"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// ActivateUser mocks base method.
func (m *MockAuthorization) ActivateUser(userId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateUser", userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateUser indicates an expected call of ActivateUser.
func (mr *MockAuthorizationMockRecorder) ActivateUser(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateUser", reflect.TypeOf((*MockAuthorization)(nil).ActivateUser), userId)
}

// ConfirmEmail mocks base method.
func (m *MockAuthorization) ConfirmEmail(token string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmEmail", token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfirmEmail indicates an expected call of ConfirmEmail.
func (mr *MockAuthorizationMockRecorder) ConfirmEmail(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmEmail", reflect.TypeOf((*MockAuthorization)(nil).ConfirmEmail), token)
}

// CreateStudent mocks base method.
func (m *MockAuthorization) CreateStudent(teacherId int, name string, classNum int) (models.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStudent", teacherId, name, classNum)
	ret0, _ := ret[0].(models.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStudent indicates an expected call of CreateStudent.
func (mr *MockAuthorizationMockRecorder) CreateStudent(teacherId, name, classNum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStudent", reflect.TypeOf((*MockAuthorization)(nil).CreateStudent), teacherId, name, classNum)
}

// CreateTeacher mocks base method.
func (m *MockAuthorization) CreateTeacher(teacher models.Teacher) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeacher", teacher)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTeacher indicates an expected call of CreateTeacher.
func (mr *MockAuthorizationMockRecorder) CreateTeacher(teacher interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeacher", reflect.TypeOf((*MockAuthorization)(nil).CreateTeacher), teacher)
}

// GenerateResetToken mocks base method.
func (m *MockAuthorization) GenerateResetToken(id int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateResetToken", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateResetToken indicates an expected call of GenerateResetToken.
func (mr *MockAuthorizationMockRecorder) GenerateResetToken(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateResetToken", reflect.TypeOf((*MockAuthorization)(nil).GenerateResetToken), id)
}

// GenerateStudentToken mocks base method.
func (m *MockAuthorization) GenerateStudentToken(login, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateStudentToken", login, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateStudentToken indicates an expected call of GenerateStudentToken.
func (mr *MockAuthorizationMockRecorder) GenerateStudentToken(login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateStudentToken", reflect.TypeOf((*MockAuthorization)(nil).GenerateStudentToken), login, password)
}

// GenerateTeacherToken mocks base method.
func (m *MockAuthorization) GenerateTeacherToken(email, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTeacherToken", email, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateTeacherToken indicates an expected call of GenerateTeacherToken.
func (mr *MockAuthorizationMockRecorder) GenerateTeacherToken(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTeacherToken", reflect.TypeOf((*MockAuthorization)(nil).GenerateTeacherToken), email, password)
}

// GetTeacherByEmail mocks base method.
func (m *MockAuthorization) GetTeacherByEmail(email string) (models.Teacher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeacherByEmail", email)
	ret0, _ := ret[0].(models.Teacher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeacherByEmail indicates an expected call of GetTeacherByEmail.
func (mr *MockAuthorizationMockRecorder) GetTeacherByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeacherByEmail", reflect.TypeOf((*MockAuthorization)(nil).GetTeacherByEmail), email)
}

// ParseResetToken mocks base method.
func (m *MockAuthorization) ParseResetToken(accessToken string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseResetToken", accessToken)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseResetToken indicates an expected call of ParseResetToken.
func (mr *MockAuthorizationMockRecorder) ParseResetToken(accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseResetToken", reflect.TypeOf((*MockAuthorization)(nil).ParseResetToken), accessToken)
}

// ParseToken mocks base method.
func (m *MockAuthorization) ParseToken(accessToken string) (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", accessToken)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthorizationMockRecorder) ParseToken(accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthorization)(nil).ParseToken), accessToken)
}

// SendConfirmationEmail mocks base method.
func (m *MockAuthorization) SendConfirmationEmail(email, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendConfirmationEmail", email, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendConfirmationEmail indicates an expected call of SendConfirmationEmail.
func (mr *MockAuthorizationMockRecorder) SendConfirmationEmail(email, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendConfirmationEmail", reflect.TypeOf((*MockAuthorization)(nil).SendConfirmationEmail), email, token)
}

// SendResetEmail mocks base method.
func (m *MockAuthorization) SendResetEmail(email, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendResetEmail", email, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendResetEmail indicates an expected call of SendResetEmail.
func (mr *MockAuthorizationMockRecorder) SendResetEmail(email, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendResetEmail", reflect.TypeOf((*MockAuthorization)(nil).SendResetEmail), email, token)
}

// UpdateStudentPassword mocks base method.
func (m *MockAuthorization) UpdateStudentPassword(studentId int, oldPassword, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStudentPassword", studentId, oldPassword, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStudentPassword indicates an expected call of UpdateStudentPassword.
func (mr *MockAuthorizationMockRecorder) UpdateStudentPassword(studentId, oldPassword, newPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStudentPassword", reflect.TypeOf((*MockAuthorization)(nil).UpdateStudentPassword), studentId, oldPassword, newPassword)
}

// UpdateTeacherPassword mocks base method.
func (m *MockAuthorization) UpdateTeacherPassword(teacherId int, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTeacherPassword", teacherId, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTeacherPassword indicates an expected call of UpdateTeacherPassword.
func (mr *MockAuthorizationMockRecorder) UpdateTeacherPassword(teacherId, newPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTeacherPassword", reflect.TypeOf((*MockAuthorization)(nil).UpdateTeacherPassword), teacherId, newPassword)
}

// MockTeacherInterface is a mock of TeacherInterface interface.
type MockTeacherInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTeacherInterfaceMockRecorder
}

// MockTeacherInterfaceMockRecorder is the mock recorder for MockTeacherInterface.
type MockTeacherInterfaceMockRecorder struct {
	mock *MockTeacherInterface
}

// NewMockTeacherInterface creates a new mock instance.
func NewMockTeacherInterface(ctrl *gomock.Controller) *MockTeacherInterface {
	mock := &MockTeacherInterface{ctrl: ctrl}
	mock.recorder = &MockTeacherInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeacherInterface) EXPECT() *MockTeacherInterfaceMockRecorder {
	return m.recorder
}

// AttachAssignment mocks base method.
func (m *MockTeacherInterface) AttachAssignment(assignmentId, studentId, teacherId int, deadline time.Time, title, description string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachAssignment", assignmentId, studentId, teacherId, deadline, title, description)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachAssignment indicates an expected call of AttachAssignment.
func (mr *MockTeacherInterfaceMockRecorder) AttachAssignment(assignmentId, studentId, teacherId, deadline, title, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachAssignment", reflect.TypeOf((*MockTeacherInterface)(nil).AttachAssignment), assignmentId, studentId, teacherId, deadline, title, description)
}

// AttachStudent mocks base method.
func (m *MockTeacherInterface) AttachStudent(teacherId int, codeWord string) (models.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachStudent", teacherId, codeWord)
	ret0, _ := ret[0].(models.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachStudent indicates an expected call of AttachStudent.
func (mr *MockTeacherInterfaceMockRecorder) AttachStudent(teacherId, codeWord interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachStudent", reflect.TypeOf((*MockTeacherInterface)(nil).AttachStudent), teacherId, codeWord)
}

// CreateAssignment mocks base method.
func (m *MockTeacherInterface) CreateAssignment(title, description string, teacherId int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAssignment", title, description, teacherId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAssignment indicates an expected call of CreateAssignment.
func (mr *MockTeacherInterfaceMockRecorder) CreateAssignment(title, description, teacherId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssignment", reflect.TypeOf((*MockTeacherInterface)(nil).CreateAssignment), title, description, teacherId)
}

// DeleteAssignment mocks base method.
func (m *MockTeacherInterface) DeleteAssignment(assignmentId int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAssignment", assignmentId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAssignment indicates an expected call of DeleteAssignment.
func (mr *MockTeacherInterfaceMockRecorder) DeleteAssignment(assignmentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssignment", reflect.TypeOf((*MockTeacherInterface)(nil).DeleteAssignment), assignmentId)
}

// DeleteFiles mocks base method.
func (m *MockTeacherInterface) DeleteFiles(assignmentId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFiles", assignmentId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFiles indicates an expected call of DeleteFiles.
func (mr *MockTeacherInterfaceMockRecorder) DeleteFiles(assignmentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFiles", reflect.TypeOf((*MockTeacherInterface)(nil).DeleteFiles), assignmentId)
}

// DeleteHomework mocks base method.
func (m *MockTeacherInterface) DeleteHomework(homeworkId int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHomework", homeworkId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHomework indicates an expected call of DeleteHomework.
func (mr *MockTeacherInterfaceMockRecorder) DeleteHomework(homeworkId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHomework", reflect.TypeOf((*MockTeacherInterface)(nil).DeleteHomework), homeworkId)
}

// DeleteStudent mocks base method.
func (m *MockTeacherInterface) DeleteStudent(teacherId, studentId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStudent", teacherId, studentId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStudent indicates an expected call of DeleteStudent.
func (mr *MockTeacherInterfaceMockRecorder) DeleteStudent(teacherId, studentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStudent", reflect.TypeOf((*MockTeacherInterface)(nil).DeleteStudent), teacherId, studentId)
}

// GetAllHomeworks mocks base method.
func (m *MockTeacherInterface) GetAllHomeworks(teacherId int) ([]models.HomeworkTeacher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllHomeworks", teacherId)
	ret0, _ := ret[0].([]models.HomeworkTeacher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllHomeworks indicates an expected call of GetAllHomeworks.
func (mr *MockTeacherInterfaceMockRecorder) GetAllHomeworks(teacherId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllHomeworks", reflect.TypeOf((*MockTeacherInterface)(nil).GetAllHomeworks), teacherId)
}

// GetAllHomeworksByStudentId mocks base method.
func (m *MockTeacherInterface) GetAllHomeworksByStudentId(studentId, teacherId int) ([]models.HomeworkTeacher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllHomeworksByStudentId", studentId, teacherId)
	ret0, _ := ret[0].([]models.HomeworkTeacher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllHomeworksByStudentId indicates an expected call of GetAllHomeworksByStudentId.
func (mr *MockTeacherInterfaceMockRecorder) GetAllHomeworksByStudentId(studentId, teacherId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllHomeworksByStudentId", reflect.TypeOf((*MockTeacherInterface)(nil).GetAllHomeworksByStudentId), studentId, teacherId)
}

// GetAssignment mocks base method.
func (m *MockTeacherInterface) GetAssignment(assignmentId, teacherId int) (models.Assignment, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssignment", assignmentId, teacherId)
	ret0, _ := ret[0].(models.Assignment)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAssignment indicates an expected call of GetAssignment.
func (mr *MockTeacherInterfaceMockRecorder) GetAssignment(assignmentId, teacherId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssignment", reflect.TypeOf((*MockTeacherInterface)(nil).GetAssignment), assignmentId, teacherId)
}

// GetAssignments mocks base method.
func (m *MockTeacherInterface) GetAssignments(teacherId int) ([]models.Assignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssignments", teacherId)
	ret0, _ := ret[0].([]models.Assignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssignments indicates an expected call of GetAssignments.
func (mr *MockTeacherInterfaceMockRecorder) GetAssignments(teacherId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssignments", reflect.TypeOf((*MockTeacherInterface)(nil).GetAssignments), teacherId)
}

// GetHomework mocks base method.
func (m *MockTeacherInterface) GetHomework(id int) (models.HomeworkTeacher, models.Submission, models.Grade, []string, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHomework", id)
	ret0, _ := ret[0].(models.HomeworkTeacher)
	ret1, _ := ret[1].(models.Submission)
	ret2, _ := ret[2].(models.Grade)
	ret3, _ := ret[3].([]string)
	ret4, _ := ret[4].([]string)
	ret5, _ := ret[5].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5
}

// GetHomework indicates an expected call of GetHomework.
func (mr *MockTeacherInterfaceMockRecorder) GetHomework(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHomework", reflect.TypeOf((*MockTeacherInterface)(nil).GetHomework), id)
}

// GetStudent mocks base method.
func (m *MockTeacherInterface) GetStudent(studentId int) (models.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudent", studentId)
	ret0, _ := ret[0].(models.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudent indicates an expected call of GetStudent.
func (mr *MockTeacherInterfaceMockRecorder) GetStudent(studentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudent", reflect.TypeOf((*MockTeacherInterface)(nil).GetStudent), studentId)
}

// GetStudents mocks base method.
func (m *MockTeacherInterface) GetStudents(teacherId int) ([]models.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudents", teacherId)
	ret0, _ := ret[0].([]models.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudents indicates an expected call of GetStudents.
func (mr *MockTeacherInterfaceMockRecorder) GetStudents(teacherId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudents", reflect.TypeOf((*MockTeacherInterface)(nil).GetStudents), teacherId)
}

// GradeHomework mocks base method.
func (m *MockTeacherInterface) GradeHomework(assignmentId, grade int, feedback string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GradeHomework", assignmentId, grade, feedback)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GradeHomework indicates an expected call of GradeHomework.
func (mr *MockTeacherInterfaceMockRecorder) GradeHomework(assignmentId, grade, feedback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GradeHomework", reflect.TypeOf((*MockTeacherInterface)(nil).GradeHomework), assignmentId, grade, feedback)
}

// SaveFile mocks base method.
func (m *MockTeacherInterface) SaveFile(assignmentId int, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFile", assignmentId, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFile indicates an expected call of SaveFile.
func (mr *MockTeacherInterfaceMockRecorder) SaveFile(assignmentId, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFile", reflect.TypeOf((*MockTeacherInterface)(nil).SaveFile), assignmentId, path)
}

// UpdateAssignment mocks base method.
func (m *MockTeacherInterface) UpdateAssignment(assignmentId int, title, description string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAssignment", assignmentId, title, description)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAssignment indicates an expected call of UpdateAssignment.
func (mr *MockTeacherInterfaceMockRecorder) UpdateAssignment(assignmentId, title, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssignment", reflect.TypeOf((*MockTeacherInterface)(nil).UpdateAssignment), assignmentId, title, description)
}

// UpdateHomework mocks base method.
func (m *MockTeacherInterface) UpdateHomework(homeworkId int, title, description string, deadline time.Time) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHomework", homeworkId, title, description, deadline)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHomework indicates an expected call of UpdateHomework.
func (mr *MockTeacherInterfaceMockRecorder) UpdateHomework(homeworkId, title, description, deadline interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHomework", reflect.TypeOf((*MockTeacherInterface)(nil).UpdateHomework), homeworkId, title, description, deadline)
}

// MockStudentInterface is a mock of StudentInterface interface.
type MockStudentInterface struct {
	ctrl     *gomock.Controller
	recorder *MockStudentInterfaceMockRecorder
}

// MockStudentInterfaceMockRecorder is the mock recorder for MockStudentInterface.
type MockStudentInterfaceMockRecorder struct {
	mock *MockStudentInterface
}

// NewMockStudentInterface creates a new mock instance.
func NewMockStudentInterface(ctrl *gomock.Controller) *MockStudentInterface {
	mock := &MockStudentInterface{ctrl: ctrl}
	mock.recorder = &MockStudentInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStudentInterface) EXPECT() *MockStudentInterfaceMockRecorder {
	return m.recorder
}

// AttachHomework mocks base method.
func (m *MockStudentInterface) AttachHomework(assignmentId, studentId int, text string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachHomework", assignmentId, studentId, text)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachHomework indicates an expected call of AttachHomework.
func (mr *MockStudentInterfaceMockRecorder) AttachHomework(assignmentId, studentId, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachHomework", reflect.TypeOf((*MockStudentInterface)(nil).AttachHomework), assignmentId, studentId, text)
}

// DeleteFiles mocks base method.
func (m *MockStudentInterface) DeleteFiles(submissionId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFiles", submissionId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFiles indicates an expected call of DeleteFiles.
func (mr *MockStudentInterfaceMockRecorder) DeleteFiles(submissionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFiles", reflect.TypeOf((*MockStudentInterface)(nil).DeleteFiles), submissionId)
}

// DeleteHomework mocks base method.
func (m *MockStudentInterface) DeleteHomework(submissionId int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHomework", submissionId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHomework indicates an expected call of DeleteHomework.
func (mr *MockStudentInterfaceMockRecorder) DeleteHomework(submissionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHomework", reflect.TypeOf((*MockStudentInterface)(nil).DeleteHomework), submissionId)
}

// GetAllHomeworks mocks base method.
func (m *MockStudentInterface) GetAllHomeworks(studentId, teacherId int) ([]models.HomeworkStudent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllHomeworks", studentId, teacherId)
	ret0, _ := ret[0].([]models.HomeworkStudent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllHomeworks indicates an expected call of GetAllHomeworks.
func (mr *MockStudentInterfaceMockRecorder) GetAllHomeworks(studentId, teacherId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllHomeworks", reflect.TypeOf((*MockStudentInterface)(nil).GetAllHomeworks), studentId, teacherId)
}

// GetHomework mocks base method.
func (m *MockStudentInterface) GetHomework(id int) (models.HomeworkStudent, models.Submission, models.Grade, []string, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHomework", id)
	ret0, _ := ret[0].(models.HomeworkStudent)
	ret1, _ := ret[1].(models.Submission)
	ret2, _ := ret[2].(models.Grade)
	ret3, _ := ret[3].([]string)
	ret4, _ := ret[4].([]string)
	ret5, _ := ret[5].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5
}

// GetHomework indicates an expected call of GetHomework.
func (mr *MockStudentInterfaceMockRecorder) GetHomework(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHomework", reflect.TypeOf((*MockStudentInterface)(nil).GetHomework), id)
}

// GetTeachers mocks base method.
func (m *MockStudentInterface) GetTeachers(id int) ([]models.Teacher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeachers", id)
	ret0, _ := ret[0].([]models.Teacher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeachers indicates an expected call of GetTeachers.
func (mr *MockStudentInterfaceMockRecorder) GetTeachers(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeachers", reflect.TypeOf((*MockStudentInterface)(nil).GetTeachers), id)
}

// SaveFile mocks base method.
func (m *MockStudentInterface) SaveFile(submissionId int, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFile", submissionId, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFile indicates an expected call of SaveFile.
func (mr *MockStudentInterfaceMockRecorder) SaveFile(submissionId, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFile", reflect.TypeOf((*MockStudentInterface)(nil).SaveFile), submissionId, path)
}

// UpdateHomework mocks base method.
func (m *MockStudentInterface) UpdateHomework(submissionId int, text string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHomework", submissionId, text)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHomework indicates an expected call of UpdateHomework.
func (mr *MockStudentInterfaceMockRecorder) UpdateHomework(submissionId, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHomework", reflect.TypeOf((*MockStudentInterface)(nil).UpdateHomework), submissionId, text)
}

// MockEmailSender is a mock of EmailSender interface.
type MockEmailSender struct {
	ctrl     *gomock.Controller
	recorder *MockEmailSenderMockRecorder
}

// MockEmailSenderMockRecorder is the mock recorder for MockEmailSender.
type MockEmailSenderMockRecorder struct {
	mock *MockEmailSender
}

// NewMockEmailSender creates a new mock instance.
func NewMockEmailSender(ctrl *gomock.Controller) *MockEmailSender {
	mock := &MockEmailSender{ctrl: ctrl}
	mock.recorder = &MockEmailSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailSender) EXPECT() *MockEmailSenderMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *MockEmailSender) SendEmail(to, subject, body string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", to, subject, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockEmailSenderMockRecorder) SendEmail(to, subject, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockEmailSender)(nil).SendEmail), to, subject, body)
}

// MockFileSaver is a mock of FileSaver interface.
type MockFileSaver struct {
	ctrl     *gomock.Controller
	recorder *MockFileSaverMockRecorder
}

// MockFileSaverMockRecorder is the mock recorder for MockFileSaver.
type MockFileSaverMockRecorder struct {
	mock *MockFileSaver
}

// NewMockFileSaver creates a new mock instance.
func NewMockFileSaver(ctrl *gomock.Controller) *MockFileSaver {
	mock := &MockFileSaver{ctrl: ctrl}
	mock.recorder = &MockFileSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileSaver) EXPECT() *MockFileSaverMockRecorder {
	return m.recorder
}

// SaveFile mocks base method.
func (m *MockFileSaver) SaveFile(c *gin.Context, file *multipart.FileHeader, uploadDir string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFile", c, file, uploadDir)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveFile indicates an expected call of SaveFile.
func (mr *MockFileSaverMockRecorder) SaveFile(c, file, uploadDir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFile", reflect.TypeOf((*MockFileSaver)(nil).SaveFile), c, file, uploadDir)
}
